Для парсинга web-страниц(xml, html) понадобится встроенная библиотека python - lxml. Для работы с html страницами понадобится класс html.

from lxml import html

Для выполнения парсинга файла(file_name), страницы, объекта, необходимо воспользоваться функцией parse.

document = html.parse(file_name)

Функция parse возвращает элемент типа ElementTree, представляющий собой древовидный элемент, который состоит из объектов Element - всех элементов страницы, таких как html, body, h1, p, a и т.д. В свою очередь каждый элемент может содержать в себе и другие элементы, которые для него являются дочерними.

Для поиска отдельного элемента используется функция find()

body = document.find('body')

Также возможен поиск всех присутствующих элементов при помощи функции findall()

p = body.findall('p')

Также очень удобно работать, используя функцию xpath(), которая принимает в качестве аргумента путь к нужному элементу. Эта функция использует интерпретатор языка XPath - язык запросов к элементам XML-документа. 
Краткое описание синтаксиса:
nodename 	Selects all nodes with the name "nodename"
/ 	Selects from the root node
// 	Selects nodes in the document from the current node that match the selection no matter where they are
. 	Selects the current node
.. 	Selects the parent of the current node
@ 	Selects attributes

Примеры:
Path Expression 	Result
bookstore ---	Selects all nodes with the name "bookstore"
----------------------------------------------------------
/bookstore ---	Selects the root element bookstore. Note: If the path starts with a slash ( / ) it always represents an absolute path to an element!
-----------------------------------------------------------
bookstore/book 	--- Selects all book elements that are children of bookstore
-------------------------------------------------------------
//book ---	Selects all book elements no matter where they are in the document
-------------------------------------------------------------
bookstore//book ---	Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element
-----------------------------------------------------------------
//@lang ---	Selects all attributes that are named lang


Path Expression 	Result
/bookstore/book[1] -----	Selects the first book element that is the child of the bookstore element.Note: In IE 5,6,7,8,9 first node is[0], but according to W3C, it is [1]. To solve this problem in IE, set the SelectionLanguage to XPath:
In JavaScript: xml.setProperty("SelectionLanguage","XPath");
---------------------------------------------------------------
/bookstore/book[last()] ----	Selects the last book element that is the child of the bookstore element
---------------------------------------------------------------
/bookstore/book[last()-1] ---	Selects the last but one book element that is the child of the bookstore element
---------------------------------------------------------------
/bookstore/book[position()<3] ---	Selects the first two book elements that are children of the bookstore element
---------------------------------------------------------------
//title[@lang] ---	Selects all the title elements that have an attribute named lang
---------------------------------------------------------------
//title[@lang='en'] ---	Selects all the title elements that have a "lang" attribute with a value of "en"
---------------------------------------------------------------
/bookstore/book[price>35.00] ---	Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00
---------------------------------------------------------------
/bookstore/book[price>35.00]/title ---	Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00
---------------------------------------------------------------

Wildcard 	Description
* 	Matches any element node
@* 	Matches any attribute node
node() 	Matches any node of any kind


Path Expression 	Result
/bookstore/* ----	Selects all the child element nodes of the bookstore element
------------------------------------------------------------------------
//* ---	Selects all elements in the document
------------------------------------------------------------------------
//title[@*]  ---	Selects all title elements which have at least one attribute of any kind
------------------------------------------------------------------------

Selecting Several Paths

Path Expression 	Result
//book/title | //book/price ---	Selects all the title AND price elements of all book elements
-------------------------------------------------------------------------
//title | //price ---	Selects all the title AND price elements in the document
------------------------------------------------------------------------
/bookstore/book/title | //price ---	Selects all the title elements of the book element of the bookstore element AND all the price elements in the document
--------------------------------------------------------------------------


Важно отметить, что функция xpath() возвращает список элементов, соответствующих заданному пути.

Полезные функции библиотеки lxml:
Класс ElementTree:
ElementTree.getiterator() - возвращает список всех элементов внутри дерева
ElementTree.write(file, pretty_print=False) - конверирует объект ElementTree в файл.
--------------------------------
Класс Element:
Атрибуты Element
.attrib - словарь, включающий 'имя атрибута':'значение'
.tag - имя элемента
.text - текст внутри элемента
и др.
Element имеет сходное поведение со списком python, он хранит в себе все дочерние элементы, как значения этого списка. К нему применимы функция len(), возможность использования среза [:] для работы с отдельными дочерними элементами. 
Функции:
Element.find('<tag>')
Element.findall('<tag>')
Element.get('<attrib_name>') - возвращает значение аттрибуда элемента
Element.getchildren() - возвращает список дочерних элементов.
Element.xpath()
и т.д.
